#! /usr/bin/env python3

import yaml
import numpy as np
import threading
from rwlock import RWLock
import stretch_body.robot as rb
from stretch_body.hello_utils import ThreadServiceExit

import tf2_ros
import tf_conversions

import rospy
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from geometry_msgs.msg import TransformStamped

from sensor_msgs.msg import Joy

import actionlib
from control_msgs.msg import FollowJointTrajectoryAction
from control_msgs.msg import FollowJointTrajectoryResult

from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse
from std_srvs.srv import SetBool, SetBoolResponse

from nav_msgs.msg import Odometry
from sensor_msgs.msg import BatteryState, JointState, Imu, MagneticField
from std_msgs.msg import Bool, Header, String

from joint_trajectory_server import JointTrajectoryAction
from stretch_diagnostics import StretchDiagnostics


class StretchBodyNode:

    def __init__(self):
        self.use_robotis_head = True
        self.use_robotis_end_of_arm = True

        self.default_goal_timeout_s = 10.0
        self.default_goal_timeout_duration = rospy.Duration(self.default_goal_timeout_s)

        self.robot_stop_lock = threading.Lock()
        self.stop_the_robot = False

        self.robot_mode_rwlock = RWLock()
        self.robot_mode = None

        self.lift_delta = 0
        self.arm_delta = 0
        self.wrist_left = 0
        self.wrist_right = 0
        self.stow_button = 0
        self.gripper_close = 0
        self.gripper_open = 0
        self.head_pan_left = 0
        self.head_tilt_up = 0

    ###### MOBILE BASE VELOCITY METHODS #######

    def set_arm_velocity_callback(self, joy_in):
        self.arm_delta = -joy_in.axes[3]
        self.lift_delta = joy_in.axes[4]            
        self.wrist_left = joy_in.axes[2] < -0.1
        self.wrist_right = joy_in.axes[5] < -0.1
        self.head_pan_left = joy_in.axes[6]
        self.head_tilt_up = joy_in.axes[7]

        self.gripper_close = joy_in.buttons[0]
        self.gripper_open = joy_in.buttons[1]
        self.stow_button = joy_in.buttons[3]
        self.deliver_object_button = joy_in.buttons[6]
        self.grasp_object_button = joy_in.buttons[7]
        # print(joy_in)

    def set_mobile_base_velocity_callback(self, twist):
        self.robot_mode_rwlock.acquire_read()
        if self.robot_mode != 'navigation':
            error_string = '{0} action server must be in navigation mode to receive a twist on cmd_vel. Current mode = {1}.'.format(self.node_name, self.robot_mode)
            rospy.logerr(error_string)
            return
        self.linear_velocity_mps = twist.linear.x
        self.angular_velocity_radps = twist.angular.z
        self.last_twist_time = rospy.get_time()
        self.robot_mode_rwlock.release_read()

    def command_mobile_base_velocity_and_publish_state(self):
        self.robot_mode_rwlock.acquire_read()

        # set new mobile base velocities if available
        if self.robot_mode == 'navigation': 
            time_since_last_twist = rospy.get_time() - self.last_twist_time
            if time_since_last_twist < self.timeout:
                self.robot.base.set_velocity(self.linear_velocity_mps, self.angular_velocity_radps)
                self.robot.push_command()
            else:
                # Watchdog timer stops motion if no communication within timeout
                self.robot.base.set_velocity(0.0, 0.0)
                self.robot.push_command()
        
        # Update lift, arm, and wrist position based on twist input
        time_since_last_twist = rospy.get_time() - self.last_twist_time
        if time_since_last_twist < self.timeout:
            # Lift
            lift_target_vel = 0.1 * self.lift_delta
            max_lift = 1.0
            min_lift = 0.2
            if (lift_target_vel > 0.01):
                self.robot.lift.move_to(max_lift, lift_target_vel)
            elif lift_target_vel < -0.01:
                self.robot.lift.move_to(min_lift, lift_target_vel)
            else:
                self.robot.lift.set_velocity(0, 0.3)
            # arm
            arm_target_vel = 0.1 * self.arm_delta
            max_arm = 0.4
            min_arm = 0.1
            if (arm_target_vel > 0):
                self.robot.arm.move_to(max_arm, arm_target_vel)
            else:
                self.robot.arm.move_to(min_arm, arm_target_vel)
            # wrist
            max_wrist = 4.0
            min_wrist = -1.0
            if (self.wrist_left):
                self.robot.end_of_arm.get_joint('wrist_yaw').move_to(max_wrist)
            elif (self.wrist_right):
                self.robot.end_of_arm.get_joint('wrist_yaw').move_to(min_wrist)
            else:
                self.robot.end_of_arm.get_joint('wrist_yaw').quick_stop()
            # gripper
            max_gripper = -50
            min_gripper = 30
            if (self.gripper_close):
                # self.robot.end_of_arm.get_joint('stretch_gripper').move_to(max_gripper)
                self.robot.end_of_arm.get_joint('stretch_gripper').pose('close')
            elif (self.gripper_open):
                # self.robot.end_of_arm.get_joint('stretch_gripper').move_to(min_gripper)
                self.robot.end_of_arm.get_joint('stretch_gripper').pose('open')
            else:
                self.robot.end_of_arm.get_joint('stretch_gripper').quick_stop()
            # head pan
            max_head_pan = 0
            min_head_pan = -3.14
            if (self.head_pan_left > 0.1):
                self.robot.head.move_to('head_pan', max_head_pan)
            elif (self.head_pan_left < -0.1):
                self.robot.head.move_to('head_pan', min_head_pan)
            else:
                self.robot.head.get_joint('head_pan').quick_stop()
            # head tilt
            max_head_tilt = 0
            min_head_tilt = -1.57
            if (self.head_tilt_up > 0.1):
                self.robot.head.move_to('head_tilt', max_head_tilt)
            elif (self.head_tilt_up < -0.1):
                self.robot.head.move_to('head_tilt', min_head_tilt)
            else:
                self.robot.head.get_joint('head_tilt').quick_stop()

            self.robot.push_command()
        else:
            # Watchdog timer stops motion if no communication within timeout
            self.robot.lift.set_velocity(0.0)
            self.robot.arm.set_velocity(0.0)
            self.robot.end_of_arm.get_joint('wrist_yaw').quick_stop()
            self.robot.end_of_arm.get_joint('stretch_gripper').quick_stop()
            # self.robot.head.get_joint('head_pan').quick_stop()
            # self.robot.head.get_joint('head_tilt').quick_stop()
            self.robot.push_command()
        
        # Enable stow
        if (self.stow_button):
            self.robot.stow()

        # Enable grasp object
        if (self.grasp_object_button):
            trigger_request = TriggerRequest() 
            trigger_result = self.trigger_grasp_object_service(trigger_request)
            rospy.loginfo('trigger_result = {0}'.format(trigger_result))

        # # Enable deliver object
        # if (self.deliver_object_button):
        #     trigger_request = TriggerRequest() 
        #     trigger_result = self.trigger_deliver_object_service(trigger_request)
        #     rospy.loginfo('trigger_result = {0}'.format(trigger_result))

        # TODO: In the future, consider using time stamps from the robot's
        # motor control boards and other boards. These would need to
        # be synchronized with the rospy clock.
        #robot_time = robot_status['timestamp_pc']
        #current_time = rospy.Time.from_sec(robot_time)
        current_time = rospy.Time.now()
        robot_status = self.robot.get_status()

        # obtain odometry
        base_status = robot_status['base']
        x = base_status['x']
        y = base_status['y']
        theta = base_status['theta']
        q = tf_conversions.transformations.quaternion_from_euler(0, 0, theta)
        x_vel = base_status['x_vel']
        x_effort = base_status['effort'][0]
        theta_vel = base_status['theta_vel']
        pose_time_s = base_status['pose_time_s']

        if self.broadcast_odom_tf:
            # publish odometry via TF
            t = TransformStamped()
            t.header.stamp = current_time
            t.header.frame_id = self.odom_frame_id
            t.child_frame_id = self.base_frame_id
            t.transform.translation.x = x
            t.transform.translation.y = y
            t.transform.translation.z = 0.0
            t.transform.rotation.x = q[0]
            t.transform.rotation.y = q[1]
            t.transform.rotation.z = q[2]
            t.transform.rotation.w = q[3]
            self.tf_broadcaster.sendTransform(t)

        # publish odometry
        odom = Odometry()
        odom.header.stamp = current_time
        odom.header.frame_id = self.odom_frame_id
        odom.child_frame_id = self.base_frame_id
        odom.pose.pose.position.x = x
        odom.pose.pose.position.y = y
        odom.pose.pose.orientation.x = q[0]
        odom.pose.pose.orientation.y = q[1]
        odom.pose.pose.orientation.z = q[2]
        odom.pose.pose.orientation.w = q[3]
        odom.twist.twist.linear.x = x_vel
        odom.twist.twist.angular.z = theta_vel
        self.odom_pub.publish(odom)

        # TODO: Add way to determine if the robot is charging
        # TODO: Calculate the percentage
        battery_state = BatteryState()
        invalid_reading = float('NaN')
        battery_state.header.stamp = current_time
        battery_state.voltage = float(robot_status['pimu']['voltage'])
        battery_state.current = float(robot_status['pimu']['current'])
        battery_state.charge = invalid_reading
        battery_state.capacity = invalid_reading
        battery_state.percentage = invalid_reading
        battery_state.design_capacity = 18.0
        battery_state.present = True
        self.power_pub.publish(battery_state)

        calibration_status = Bool()
        calibration_status.data = self.robot.is_calibrated()
        self.calibration_pub.publish(calibration_status)

        mode_msg = String()
        mode_msg.data = self.robot_mode
        self.mode_pub.publish(mode_msg)

        # publish joint state
        joint_state = JointState()
        joint_state.header.stamp = current_time
        cgs = list(set(self.joint_trajectory_action.command_groups) - set([self.joint_trajectory_action.mobile_base_cg]))
        for cg in cgs:
            pos, vel, effort = cg.joint_state(robot_status, robot_mode=self.robot_mode)
            joint_state.name.append(cg.name)
            joint_state.position.append(pos)
            joint_state.velocity.append(vel)
            joint_state.effort.append(effort)

        # add telescoping joints to joint state
        arm_cg = self.joint_trajectory_action.arm_cg
        joint_state.name.extend(arm_cg.telescoping_joints)
        pos, vel, effort = arm_cg.joint_state(robot_status)
        for _ in range(len(arm_cg.telescoping_joints)):
            joint_state.position.append(pos / len(arm_cg.telescoping_joints))
            joint_state.velocity.append(vel / len(arm_cg.telescoping_joints))
            joint_state.effort.append(effort)

        # add gripper joints to joint state
        gripper_cg = self.joint_trajectory_action.gripper_cg
        if gripper_cg is not None:
            missing_gripper_joint_names = list(set(gripper_cg.gripper_joint_names) - set(joint_state.name))
            for j in missing_gripper_joint_names:
                pos, vel, effort = gripper_cg.joint_state(robot_status, joint_name=j)
                joint_state.name.append(j)
                joint_state.position.append(pos)
                joint_state.velocity.append(vel)
                joint_state.effort.append(effort)

        self.joint_state_pub.publish(joint_state)

        ##################################################
        # publish IMU sensor data
        imu_status = robot_status['pimu']['imu']
        ax = imu_status['ax']
        ay = imu_status['ay']
        az = imu_status['az']
        gx = imu_status['gx']
        gy = imu_status['gy']
        gz = imu_status['gz']
        mx = imu_status['mx']
        my = imu_status['my']
        mz = imu_status['mz']

        i = Imu()
        i.header.stamp = current_time
        i.header.frame_id = 'imu_mobile_base'
        i.angular_velocity.x = gx
        i.angular_velocity.y = gy
        i.angular_velocity.z = gz
        i.linear_acceleration.x = ax
        i.linear_acceleration.y = ay
        i.linear_acceleration.z = az
        self.imu_mobile_base_pub.publish(i)

        m = MagneticField()
        m.header.stamp = current_time
        m.header.frame_id = 'imu_mobile_base'
        self.magnetometer_mobile_base_pub.publish(m)

        accel_status = robot_status['wacc']
        ax = accel_status['ax']
        ay = accel_status['ay']
        az = accel_status['az']

        i = Imu()
        i.header.stamp = current_time
        i.header.frame_id = 'accel_wrist'
        i.linear_acceleration.x = ax
        i.linear_acceleration.y = ay
        i.linear_acceleration.z = az
        self.imu_wrist_pub.publish(i)
        ##################################################

        self.robot_mode_rwlock.release_read()

    ######## CHANGE MODES #########

    def change_mode(self, new_mode, code_to_run):
        self.robot_mode_rwlock.acquire_write()
        self.robot_mode = new_mode
        code_to_run()
        rospy.loginfo('{0}: Changed to mode = {1}'.format(self.node_name, self.robot_mode))
        self.robot_mode_rwlock.release_write()

    # TODO : add a freewheel mode or something comparable for the mobile base?

    def turn_on_navigation_mode(self):
        # Navigation mode enables mobile base velocity control via
        # cmd_vel, and disables position-based control of the mobile
        # base.
        def code_to_run():
            self.linear_velocity_mps = 0.0
            self.angular_velocity_radps = 0.0
        self.change_mode('navigation', code_to_run)

    def turn_on_position_mode(self):
        # Position mode enables mobile base translation and rotation
        # using position control with sequential incremental rotations
        # and translations. It also disables velocity control of the
        # mobile base. It does not update the virtual prismatic
        # joint. The frames associated with 'floor_link' and
        # 'base_link' become identical in this mode.
        def code_to_run():
            self.robot.base.enable_pos_incr_mode()
        self.change_mode('position', code_to_run)

    def calibrate(self):
        def code_to_run():
            self.robot.home()
        self.change_mode('calibration', code_to_run)

    ######## SERVICE CALLBACKS #######

    def stop_the_robot_callback(self, request):
        with self.robot_stop_lock:
            self.stop_the_robot = True

            self.robot.base.translate_by(0.0)
            self.robot.base.rotate_by(0.0)
            self.robot.arm.move_by(0.0)
            self.robot.lift.move_by(0.0)
            self.robot.push_command()

            for joint in self.robot.head.joints:
                self.robot.head.move_by(joint, 0.0)
            for joint in self.robot.end_of_arm.joints:
                self.robot.end_of_arm.move_by(joint, 0.0)

        rospy.loginfo('Received stop_the_robot service call, so commanded all actuators to stop.')
        return TriggerResponse(
            success=True,
            message='Stopped the robot.'
            )

    def calibrate_callback(self, request):
        rospy.loginfo('Received calibrate_the_robot service call.')
        self.calibrate()
        return TriggerResponse(
            success=True,
            message='Calibrated.'
        )

    def navigation_mode_service_callback(self, request):
        self.turn_on_navigation_mode()
        return TriggerResponse(
            success=True,
            message='Now in navigation mode.'
            )

    def position_mode_service_callback(self, request):
        self.turn_on_position_mode()
        return TriggerResponse(
            success=True,
            message='Now in position mode.'
            )

    def runstop_service_callback(self, request):
        if request.data:
            with self.robot_stop_lock:
                self.stop_the_robot = True

                self.robot.base.translate_by(0.0)
                self.robot.base.rotate_by(0.0)
                self.robot.arm.move_by(0.0)
                self.robot.lift.move_by(0.0)
                self.robot.push_command()

                for joint in self.robot.head.joints:
                    self.robot.head.move_by(joint, 0.0)
                for joint in self.robot.end_of_arm.joints:
                    self.robot.end_of_arm.move_by(joint, 0.0)

            self.robot.pimu.runstop_event_trigger()
        else:
            self.robot.pimu.runstop_event_reset()

        return SetBoolResponse(
            success=True,
            message='is_runstopped: {0}'.format(request.data)
            )

    ########### MAIN ############

    def main(self):

        rospy.init_node('stretch_driver')
        self.node_name = rospy.get_name()

        rospy.loginfo("For use with S T R E T C H (TM) RESEARCH EDITION from Hello Robot Inc.")

        rospy.loginfo("{0} started".format(self.node_name))

        self.robot = rb.Robot()
        self.robot.startup()

        mode = rospy.get_param('~mode', "position")
        rospy.loginfo('mode = ' + str(mode))
        if mode == "position":
            self.turn_on_position_mode()
        elif mode == "navigation":
            self.turn_on_navigation_mode()

        self.broadcast_odom_tf = rospy.get_param('~broadcast_odom_tf', False)
        rospy.loginfo('broadcast_odom_tf = ' + str(self.broadcast_odom_tf))
        if self.broadcast_odom_tf:
            self.tf_broadcaster = tf2_ros.TransformBroadcaster()

        large_ang = np.radians(45.0)
        filename = rospy.get_param('~controller_calibration_file')
        rospy.loginfo('Loading controller calibration parameters for the head from YAML file named {0}'.format(filename))
        with open(filename, 'r') as fid:
            self.controller_parameters = yaml.safe_load(fid)
            rospy.loginfo('controller parameters loaded = {0}'.format(self.controller_parameters))

            head_tilt_calibrated_offset_rad = self.controller_parameters['tilt_angle_offset']
            if (abs(head_tilt_calibrated_offset_rad) > large_ang):
                rospy.logwarn('WARNING: head_tilt_calibrated_offset_rad HAS AN UNUSUALLY LARGE MAGNITUDE')
            rospy.loginfo('head_tilt_calibrated_offset_rad in degrees = {0}'.format(np.degrees(head_tilt_calibrated_offset_rad)))

            head_pan_calibrated_offset_rad = self.controller_parameters['pan_angle_offset']
            if (abs(head_pan_calibrated_offset_rad) > large_ang):
                rospy.logwarn('WARNING: head_pan_calibrated_offset_rad HAS AN UNUSUALLY LARGE MAGNITUDE')
            rospy.loginfo('head_pan_calibrated_offset_rad in degrees = {0}'.format(np.degrees(head_pan_calibrated_offset_rad)))

            head_pan_calibrated_looked_left_offset_rad = self.controller_parameters['pan_looked_left_offset']
            if (abs(head_pan_calibrated_looked_left_offset_rad) > large_ang):
                rospy.logwarn('WARNING: head_pan_calibrated_looked_left_offset_rad HAS AN UNUSUALLY LARGE MAGNITUDE')
            rospy.loginfo('head_pan_calibrated_looked_left_offset_rad in degrees = {0}'.format(np.degrees(head_pan_calibrated_looked_left_offset_rad)))

            head_tilt_backlash_transition_angle_rad = self.controller_parameters['tilt_angle_backlash_transition']
            rospy.loginfo('head_tilt_backlash_transition_angle_rad in degrees = {0}'.format(np.degrees(head_tilt_backlash_transition_angle_rad)))

            head_tilt_calibrated_looking_up_offset_rad = self.controller_parameters['tilt_looking_up_offset']
            if (abs(head_tilt_calibrated_looking_up_offset_rad) > large_ang):
                rospy.logwarn('WARNING: head_tilt_calibrated_looking_up_offset_rad HAS AN UNUSUALLY LARGE MAGNITUDE')
            rospy.loginfo('head_tilt_calibrated_looking_up_offset_rad in degrees = {0}'.format(np.degrees(head_tilt_calibrated_looking_up_offset_rad)))

            arm_calibrated_retracted_offset_m = self.controller_parameters['arm_retracted_offset']
            if (abs(arm_calibrated_retracted_offset_m) > 0.05):
                rospy.logwarn('WARNING: arm_calibrated_retracted_offset_m HAS AN UNUSUALLY LARGE MAGNITUDE')
            rospy.loginfo('arm_calibrated_retracted_offset_m in meters = {0}'.format(arm_calibrated_retracted_offset_m))

        self.linear_velocity_mps = 0.0 # m/s ROS SI standard for cmd_vel (REP 103)
        self.angular_velocity_radps = 0.0 # rad/s ROS SI standard for cmd_vel (REP 103)

        self.max_arm_height = 1.1

        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=1)

        self.power_pub = rospy.Publisher('battery', BatteryState, queue_size=1)
        self.calibration_pub = rospy.Publisher('is_calibrated', Bool, queue_size=1)
        self.mode_pub = rospy.Publisher('mode', String, queue_size=1)

        self.imu_mobile_base_pub = rospy.Publisher('imu_mobile_base', Imu, queue_size=1)
        self.magnetometer_mobile_base_pub = rospy.Publisher('magnetometer_mobile_base', MagneticField, queue_size=1)
        self.imu_wrist_pub = rospy.Publisher('imu_wrist', Imu, queue_size=1)

        rospy.Subscriber("cmd_vel", Twist, self.set_mobile_base_velocity_callback)
        rospy.Subscriber("joy", Joy, self.set_arm_velocity_callback)

        # ~ symbol gets parameter from private namespace
        self.joint_state_rate = rospy.get_param('~rate', 15.0)
        self.timeout = rospy.get_param('~timeout', 1.0)
        rospy.loginfo("{0} rate = {1} Hz".format(self.node_name, self.joint_state_rate))
        rospy.loginfo("{0} timeout = {1} s".format(self.node_name, self.timeout))

        self.use_fake_mechaduinos = rospy.get_param('~use_fake_mechaduinos', False)
        rospy.loginfo("{0} use_fake_mechaduinos = {1}".format(rospy.get_name(), self.use_fake_mechaduinos))

        self.base_frame_id = 'base_link'
        rospy.loginfo("{0} base_frame_id = {1}".format(self.node_name, self.base_frame_id))
        self.odom_frame_id = 'odom'
        rospy.loginfo("{0} odom_frame_id = {1}".format(self.node_name, self.odom_frame_id))

        self.joint_state_pub = rospy.Publisher('joint_states', JointState, queue_size=1)

        command_base_velocity_and_publish_joint_state_rate = rospy.Rate(self.joint_state_rate)
        self.last_twist_time = rospy.get_time()

        # start action server for joint trajectories
        self.fail_out_of_range_goal = rospy.get_param('~fail_out_of_range_goal', True)
        self.joint_trajectory_action = JointTrajectoryAction(self)
        self.joint_trajectory_action.server.start()
        self.diagnostics = StretchDiagnostics(self, self.robot)

        self.switch_to_navigation_mode_service = rospy.Service('/switch_to_navigation_mode',
                                                               Trigger,
                                                               self.navigation_mode_service_callback)

        self.switch_to_position_mode_service = rospy.Service('/switch_to_position_mode',
                                                             Trigger,
                                                             self.position_mode_service_callback)
        
        self.stop_the_robot_service = rospy.Service('/stop_the_robot',
                                                    Trigger,
                                                    self.stop_the_robot_callback)

        self.calibrate_the_robot_service = rospy.Service('/calibrate_the_robot',
                                                         Trigger,
                                                         self.calibrate_callback)

        self.runstop_service = rospy.Service('/runstop',
                                              SetBool,
                                              self.runstop_service_callback)

        rospy.wait_for_service('/grasp_object/trigger_grasp_object')
        rospy.loginfo('Node ' + self.node_name + ' connected to /grasp_object/trigger_grasp_object.')
        self.trigger_grasp_object_service = rospy.ServiceProxy('/grasp_object/trigger_grasp_object', Trigger)

        # rospy.wait_for_service('/deliver_object/trigger_deliver_object')
        # rospy.loginfo('Node ' + self.node_name + ' connected to /deliver_object/trigger_deliver_object.')
        # self.trigger_deliver_object_service = rospy.ServiceProxy('/deliver_object/trigger_deliver_object', Trigger)

        try:
            # start loop to command the mobile base velocity, publish
            # odometry, and publish joint states
            while not rospy.is_shutdown():
                self.command_mobile_base_velocity_and_publish_state()
                command_base_velocity_and_publish_joint_state_rate.sleep()
        except (rospy.ROSInterruptException, ThreadServiceExit):
            self.robot.stop()
            rospy.signal_shutdown("stretch_driver shutdown")


if __name__ == '__main__':
    node = StretchBodyNode()
    node.main()
